#include <stdio.h>
#include <stdlib.h>
#include <time.h>


void Initialize(int n, int N[n][n], int upperbound);
int Magic(int n, int N[n][n]);
void printmat(int n, int N[n][n]);

int main(void)
{
    srand((unsigned) time(NULL));

	int n, upperbound, counter;
	printf("\nEnter size of nxn integral matrix : ");
	scanf("%d", &n);
	printf("Enter upperbound of entries : ");
	scanf("%d", &upperbound);
	printf("Wait for it....\n");

	int N[n][n];
	counter = 0;
    do 
    {
    Initialize(n, N, upperbound);
    ++counter;
    if(counter%100000 == 0) printf("%d matrices initialized.\n", counter);
    } while(!(Magic(n,N)));


    printf("\nMAGIC SQUARE! \n");
    printmat(n, N);
    printf("\n");
    
    
}

void Initialize(int n, int N[n][n], int upperbound)
{
	
	for(int i = 0; i < n; ++i)
	{
		for(int j = 0; j < n; ++j)
		{
		N[i][j] = rand()%(upperbound+1);
		}
	}
}

int Magic(int n, int N[n][n])
{
	int sums[2*n + 2], rowsum, colsum, diagsum1, diagsum2;

	diagsum1 = 0; diagsum2 = 0;

	for(int i = 0; i < n; i++)
	{
		rowsum = 0;
		colsum = 0;

		for(int j = 0; j < n; j++)
		{
			rowsum += N[i][j];
			colsum += N[j][i];
			if(i == j) diagsum1 += N[i][j];
			if(i + j == n-1) diagsum2 += N[i][j];
		}
		sums[i] = rowsum;
		sums[i + n] = colsum;

	}

	sums[2*n] = diagsum1;
	sums[2*n+1] = diagsum2;

	for(int i = 0; i < 2*n + 2; ++i)
	{
	if(sums[1] != sums[i]) return 0;
	}

	return 1;
}

void printmat(int n, int N[n][n])
{
	printf("\n");
	for(int i = 0; i < n; i++)
	{
		
		for(int j = 0; j < n; j++)
		{
			printf("%d ",N[i][j]);
		}
		printf("\n");
	}
}
